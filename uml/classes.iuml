@startuml classes
set namespaceSeparator none

''''''''''''''''''''''''''''''''''''''''''
'''''''''''''' PACKAGE: CLI ''''''''''''''
''''''''''''''''''''''''''''''''''''''''''

class "Terminal" as pyvnm.system.cli.Terminal <<Class>> {
  -user : User
  -vnm : VonNeumannMachine
  -env : Dict[str, str]
  -action_LIN(args: str[])
  -action_SDR(args: str[])
  -action_UDR(args: str[])
  -action_CRF(args: str[])
  -action_DLF(args: str[])
  -action_APA(args: str[])
  -action_APH(args: str[])
  -action_LOD(args: str[])
  -action_EXC(args: str[])
  -action_RUN(args: str[])
  -action_DMP(args: str[])
  -action_ASM(args: str[])
  -action_LRL(args: str[])
  -action_SIO(args: str[])
  -action_SET(args: str[])
  -action_MEM(args: str[])
  -action_REG(args: str[])
  -action_END(args: str[])
  -tokenize(input: str)
  +event_loop()
}


class "User" as pyvnm.system.user.User <<Class>> {
  -{static}current_user: str
  -filesystem: FileSystem
  +{static}get_current_user() : User
  +get_fs(): FileSystem
}


class "FileSystem" as pyvnm.system.fs.FileSytem <<Class>> {
  -home_dir : str
  -sys_dir : str
  +FileSystem(username: str)
  +create(data: str)
  +delete(file: str)
  +read(file: str) : str
  +write(file: str, data: str)
  +append(file: str, data: str)
  +list_user()
  +list_sys()
}

class "Linker" as pyvnm.system.linker.Linker <<Class>> {
  -object_files: List[string]
  -linked_code: str
  -symbols_table: Table
  +link(object_files: List[string]) : str
}

class "Relocator" as pyvnm.system.relocator.Relocator <<Class>> {
  -relocated_code : str
  -relocation_table: Table
  +relocate(linked_code: str) : str
}


''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''' PACKAGE: CONTROL ''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''

class "CPU" as pyvnm.vm.control.CPU <<Class>> {
  -callback : CPUCallback
  +state : CPUState
  -action_AD(operand: int)
  -action_DV(operand: int)
  -action_GD(operand: int)
  -action_HJ(operand: int)
  -action_JN(operand: int)
  -action_JP(operand: int)
  -action_JZ(operand: int)
  -action_LD(operand: int)
  -action_ML(operand: int)
  -action_OS(operand: int)
  -action_PD(operand: int)
  -action_RS(operand: int)
  -action_SB(operand: int)
  -action_SC(operand: int)
  -action_ST(operand: int)
  -increment_pc()
  +event_loop()
  +set_callback(callback: CPUCallback)
}


''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''' PACKAGE: ASSEMBLER ''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''

entity "AssemblerState" as pyvnm.system.assembler.AssemblerState <<Entity>> {
  +line_index : int
  +address : int
  +addr_type : int
  +step : int
  +assemble_mode : int
}

class "Assembler" as pyvnm.system.assembler.Assembler <<Class>> {
  -symbols_table : Table
  -equivalence_table : Table
  -state : AssemblerState
  -action_ORG(tokens: LineTokens)
  -action_DATA(tokens: LineTokens)
  -action_AREA(tokens: LineTokens)
  -action_ENTRY(tokens: LineTokens)
  -action_EXTERNAL(tokens: LineTokens)
  -action_NAME(tokens: LineTokens)
  -action_EQU(tokens: LineTokens)
  -action_DB(tokens: LineTokens)
  -action_DW(tokens: LineTokens)
  -action_DA(tokens: LineTokens)
  -action_END(tokens: LineTokens)
  -tokenize_line(line: str) : LineTokens
  -compute_checksum(program: str) : Byte
  -check_labels()
  -check_mnemonics()
  -check_operands()
  +event_loop(program: str) : str
}

entity "LineTokens" as pyvnm.system.assembler.LineTokens <<Entity>> {
  +label : str
  +mnemonic : str
  +operand : str
}

enum "PseudoInstructionSet" as pyvnm.system.assembler.PseudoInstructionSet <<Enum>> {
  +{static}ORG : str
  +{static}AREA : str
  +{static}ENTRY : str
  +{static}EXTERNAL : str
  +{static}NAME : str
  +{static}EQU : str
  +{static}DB : str
  +{static}DW : str
  +{static}DA : str
  +{static}DATA : str
  +{static}END : str
}


'''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''' PACKAGE: DEVICE ''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''

interface "Device" as pyvnm.vm.device.Device <<Interface>> {
  +read() : Word
  +write(data: Word)
}

class "Keyboard" as pyvnm.vm.device.Keyboard <<Class>> {
  +read() : Word
}

class "Screen" as pyvnm.vm.device.Screen <<Class>> {
  +write(data: Word)
}

class "CharScreen" as pyvnm.vm.device.CharScreen <<Class>> {
  -buffer : str
  +write(data: Word)
}

class "HardDrive" as pyvnm.vm.device.HardDrive <<Class>> {
  -input_file : str
  -output_file : str
  +read(data: Word)
  +write(data: Word)
  +set_input_file(path: str)
  +set_output_file(path: str)
}

class "DeviceBus" as pyvnm.vm.device.DeviceBus <<Class>> {
  -devices : Dict[int, Device]
  +add(code: int, device: Device)
  +get(code: int) : Device 
  +remove(code: int)
}


'''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''' PACKAGE: BOOTLOADER ''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''

class "Bootloader" as pyvnm.system.bootloader.Bootloader <<Class>> {
  -cpu: CPU
  +load(program_obj: str) : int
}


''''''''''''''''''''''''''''''''''''''''''
'''''''''''''' PACKAGE: ISA ''''''''''''''
''''''''''''''''''''''''''''''''''''''''''

class "Word" as pyvnm.vm.isa.Word <<Class>> {
  -value : int
  +{static}size : int
  +bin : str
  +hex : str
  +uint : int
  +int : int
  +{static}convert_to_int(value) : int
  +get_value() : int
  +set_value(word: Word)
  +is_empty() : bool
}

' class "Instruction" as pyvnm.vm.isa.Instruction <<Class>> {
'   -opcode : int
'   -operand : int
'   +get_opcode() : int
'   +get_operand() : int
'   ' +{static}build(opcode: int, operand: int) : Instruction
' }

enum "InstructionSet" as pyvnm.vm.isa.InstructionSet <<Enum>> {
  +{static}AD : int
  +{static}DV : int
  +{static}GD : int
  +{static}HJ : int
  +{static}JN : int
  +{static}JP : int
  +{static}JZ : int
  +{static}LD : int
  +{static}ML : int
  +{static}OS : int
  +{static}PD : int
  +{static}RS : int
  +{static}SB : int
  +{static}SC : int
  +{static}ST : int
  +{static}get_name(opcode: int) : str
  +{static}get_opcode(name: str) : int
}


'''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''' PACKAGE: UTILS '''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''

class "Lock" as pyvnm.vm.utils.Lock <<Class>> {
  -locked : bool
  +aquire()
  +is_locked() : bool
  +release()
}


''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''' PACKAGE: STATE ''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''

entity "CPUState" as pyvnm.vm.state.CPUState <<Entity>> {
  +acc : Word
  +pc : Word
  +pc_lock : Lock
  +memory : Memory
  +devices : DeviceBus
}


'''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''' PACKAGE: MEMORY ''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''

class "Memory" as pyvnm.vm.memory.Memory <<Class>> {
  #data : List[List[int]]
  #size : int
  -check_valid_adress(adress: int)
  +get_size() : int
  +read(address: int) : Word
  +write(address: int, data: Word)
  +hexdump()
}


''''''''''''''''''''''''''''''''''''''''''
'''''''''''''' PACKAGE: VNM ''''''''''''''
''''''''''''''''''''''''''''''''''''''''''

class "VonNeumannMachine" as pyvnm.vm.vnm.VonNeumannMachine <<Class>> {
  +cpu : CPU
  -loader_addr : int
  -dumper_addr : int
  +assemble(program: str) : str
  +link(object_files: List[str]) : str
  +relocate(linked_program : str) : str
  +load(bytecode: str)
  +dump(init_pos: int, end_pos: int) : str
  +execute_program(init_pos: int)
}
@enduml
