@startuml classes
set namespaceSeparator none

''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''' PACKAGE: CONTROL ''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''

class "ControlUnit" as pyvnm.vm.control.ControlUnit <<Class>> {
  -action_switcher : Dict[int, Callable]
  +state : MachineState
  -action_AD(operand: int)
  -action_DV(operand: int)
  -action_GD(operand: int)
  -action_HJ(operand: int)
  -action_JN(operand: int)
  -action_JP(operand: int)
  -action_JZ(operand: int)
  -action_LD(operand: int)
  -action_ML(operand: int)
  -action_OS(operand: int)
  -action_PD(operand: int)
  -action_RS(operand: int)
  -action_SB(operand: int)
  -action_SC(operand: int)
  -action_ST(operand: int)
  -increment_pc()
  +event_loop()
}


'''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''' PACKAGE: DEVICE ''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''

interface "Device" as pyvnm.vm.device.Device <<Interface>> {
  +read() : Word
  +write(data: Word)
}

class "Keyboard" as pyvnm.vm.device.Keyboard <<Class>> {
  +read() : Word
}

class "Screen" as pyvnm.vm.device.Screen <<Class>> {
  +write(data: Word)
}

class "CharScreen" as pyvnm.vm.device.CharScreen <<Class>> {
  -buffer : str
  +write(data: Word)
}

class "HardDrive" as pyvnm.vm.device.HardDrive <<Class>> {
  -input_file : str
  -output_file : str
  +read(data: Word)
  +write(data: Word)
}

class "DeviceBus" as pyvnm.vm.device.DeviceBus <<Class>> {
  -devices : Dict[int, Device]
  +add(code: int, device: Device)
  +get(code: int) : Device 
  +remove(code: int)
}


'''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''' PACKAGE: LOADER ''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''

' class "Loader" as pyvnm.system.loader.Loader <<Class>> {
'   -bytecode : str
'   -input_base : str
'   -state : MachineState
'   -words : List[str]
'   -get_instructions_range()
'   +load()
' }


'''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''' PACKAGE: DUMPER ''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''

' class "Dumper" as pyvnm.system.loader.Dumper <<Class>> {
'   -output_base : str
'   -output_path : Path
'   -state : MachineState
'   +dump() : str
' }


'''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''' PACKAGE: BOOTLOADER ''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''

class "Bootloader" as pyvnm.system.bootloader.Bootloader <<Class>> {
  -program_obj: str
  -cursor: int
  +get_byte() : Byte
}


''''''''''''''''''''''''''''''''''''''''''
'''''''''''''' PACKAGE: ISA ''''''''''''''
''''''''''''''''''''''''''''''''''''''''''

class "Word" as pyvnm.vm.isa.Word <<Class>> {
  +{static}size : int
  -value : int
  +bin : str
  +hex : str
  +uint : int
  +int : int
  +{static}convert_to_int(value) : int
  +get_value() : int
  +set_value(word: Word)
  +is_empty() : bool
}

' class "Instruction" as pyvnm.vm.isa.Instruction <<Class>> {
'   -opcode : int
'   -operand : int
'   +get_opcode() : int
'   +get_operand() : int
'   ' +{static}build(opcode: int, operand: int) : Instruction
' }

class "InstructionSet" as pyvnm.vm.isa.InstructionSet <<Class>> {
  +{static}AD : int
  +{static}DV : int
  +{static}GD : int
  +{static}HJ : int
  +{static}JN : int
  +{static}JP : int
  +{static}JZ : int
  +{static}LD : int
  +{static}ML : int
  +{static}OS : int
  +{static}PD : int
  +{static}RS : int
  +{static}SB : int
  +{static}SC : int
  +{static}ST : int
  +{static}get_name(opcode: int) : str
  +{static}get_opcode(symbol: str) : int
}


'''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''' PACKAGE: UTILS '''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''

class "Lock" as pyvnm.vm.utils.Lock <<Class>> {
  -locked : bool
  +aquire()
  +is_locked() : bool
  +release()
}


''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''' PACKAGE: STATE ''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''

entity "MachineState" as pyvnm.vm.state.MachineState <<Entity>> {
  +acc : Word
  +code_entrypoint : int
  +devices : DeviceBus
  +instructions_begin : int
  +instructions_end : int
  +memory : Memory
  +memory_start : int
  +pc : Word
  +pc_lock : Lock
  +sig_term: bool
}


'''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''' PACKAGE: MEMORY ''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''

class "Memory" as pyvnm.vm.memory.Memory <<Class>> {
  #data : List[List[int]]
  #size : int
  -check_valid_adress(adress: int)
  +get_size() : int
  +read(address: int) : Word
  +write(address: int, data: Word)
}


''''''''''''''''''''''''''''''''''''''''''
'''''''''''''' PACKAGE: VNM ''''''''''''''
''''''''''''''''''''''''''''''''''''''''''

class "VonNeumannMachine" as pyvnm.vm.vnm.VonNeumannMachine <<Class>> {
  +control_unit : ControlUnit
  +state : MachineState
  +dump() : str
  +execute_program()
  +load(bytecode: str)
}
@enduml
